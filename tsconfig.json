{
  "compilerOptions": {
    "target": "es6",
    "sourceMap": true,
    /* Basic Options */
    "module": "esnext",
    /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [
      "es6",
      "dom",
      "es2015",
      "es2016"
    ],
    /* Specify library files to be included in the compilation. */
    "allowJs": true,
    /* Allow javascript files to be compiled. */
    "jsx": "react-native",
    /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "outDir": "build/dist",
    /* Redirect output structure to the directory. */
    "noEmit": true,
    /* Do not emit outputs. */
    "importHelpers": true,
    /* Import emit helpers from 'tslib'. */
    "isolatedModules": true,
    /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,
    /* Enable all strict type-checking options. */
    "noUnusedLocals": true,
    /* Report errors on unused locals. */
    "noUnusedParameters": false,
    /* Report errors on unused parameters. */
    "noImplicitReturns": true,
    /* Report error when not all code paths in function return a value. */

    /* Module Resolution Options */
    "moduleResolution": "node",
    /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./src",
    /* Base directory to resolve non-absolute module names. */
    "allowSyntheticDefaultImports": true,
    /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,
    /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "skipLibCheck": true,
    /* Skip type checking of declaration files. */
    "resolveJsonModule": true,
    /* Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. */
    "experimentalDecorators": true,
    /* Enables experimental support for ES7 decorators. */
    "emitDecoratorMetadata": true,
    /* Enables experimental support for emitting type metadata for decorators. */
    "useDefineForClassFields": true,
    "noEmitHelpers": true,
    "noImplicitOverride": false,
    "paths": {
      "@components": [
        "./components"
      ],
      "@components/*": [
        "./components/*"
      ],
      "@services": [
        "./services"
      ],
      "@services/*": [
        "./services/*"
      ]
    }
  },
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js",
    "jest.config.js"
  ],
  "awesomeTypescriptLoaderOptions": {
    "useBabel": true
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx"
  ]
}
